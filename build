#! /bin/bash

echo
echo "COMMAND	: build # FireFUSE"
echo "DATE	: "`date`

if [ "$SUDO_USER" != "" ]; then
  echo "ERROR	: This script will call sudo as required and must be run by non-root user"
  echo "TRY	:   ./build"
  exit -1
fi

if [ -e CMakeFiles ] ; then 
  echo "STATUS	: removing existing makefiles"
  sudo rm -rf CMakeCache.txt CMakeFiles CMakeFiles.txt target cmake_install.cmake CPackConfig.cmake CPackSourceConfig.cmake
  mkdir target
fi
 
function help() {
  echo "Build FireFUSE for Raspbian"
  echo 
  echo "EXAMPLES:"
  echo "  ../build"
  echo
  echo "OPTIONS:"
  echo "  -h"
  echo "  --help"
  echo "     Print this help text"
  echo "  -c install"
  echo "     Install pre-built OpenCV package if available (fast, simple). This is default."
  echo "  -c make"
  echo "     Rebuild OpenCV from latest source code from latest code."
  echo "     This will take about 10 hours and require a persistent ssh connection."
  echo "     If your build is interrupted:"
  echo "       cd opencv/build"
  echo "       sudo make install"
}
 
while getopts "hc:" flag; do
  case "$flag" in
    c) cv="$OPTARG";;
    h) help ; exit 0;;
    help) help ; exit 0;;
  esac
done
 

if [ "$(type -p cmake)" == "" ]; then
  echo "INSTALL	: cmake ..."
  if [ `uname -o` == "Solaris" ]; then
    sudo pkgin -y install gmake
    if [ $? -ne 0 ]; then echo "ERROR	: Installation failed"; exit -1; fi
    sudo pkgin -y install cmake
    if [ $? -ne 0 ]; then echo "ERROR	: Installation failed"; exit -1; fi
  else
    sudo apt-get -y install cmake
    if [ $? -ne 0 ]; then echo "ERROR	: Installation failed"; exit -1; fi
  fi
fi
echo "STATUS	: cmake installed"

cv="install"

if [ "$(type -p lsb_release)" == "" ]; then
  ccho "INSTALL	: lsb_release ..."
  sudo apt-get install -y lsb_release
  RC=$?; if [ $RC -ne 0 ]; then
    echo "FAILED	: RC=$RC "; 
    echo "TRY	: Debian Linux is required";
    exit -1;
  fi
fi
echo "STATUS	: lsb_release installed"

if [ "$(lsb_release -is)" != "Debian" ] ;then
  echo "WARNING	: Only Debian Linux is supported";
fi

if [ ! -e /usr/local/include/jansson.h ] ; then
  echo "INSTALL	: jansson ..."
  sudo apt-get -y install dh-autoreconf
  git clone git://github.com/akheron/jansson jannson
  pushd jannson > /dev/null
  autoreconf -i
  ./configure
  cmake .
  if [ $? -ne 0 ]; then echo "ERROR	: Installation failed"; exit -1; fi
  sudo make install
  if [ $? -ne 0 ]; then echo "ERROR	: Installation failed"; exit -1; fi
  popd > /dev/null
fi
echo "STATUS	: jansson installed"

if [ "$cv" == "make" ] ;then
  echo "STATUS	: building OPENCV C++ libraries (this will take hours)"
  echo "INSTALL	: openexr for libIlmImf.so.6"
  sudo apt-get -y install openexr
  sudo apt-get -y install libavcodec-dev
  sudo apt-get -y install libavformat-dev
  sudo apt-get -y install libswscale-dev
  sudo apt-get -y install libdc1394-22
  sudo apt-get -y install libz-dev

  if [ ! -e opencv ] ; then
    git clone https://github.com/firepick1/opencv -b 2.4
  fi
  mkdir opencv/build
  pushd opencv/build > /dev/null
    cmake \
      -D WITH_OPENEXR=OFF \
      -D CMAKE_BUILD_TYPE=DEBUG \
      -D CMAKE_INSTALL_PREFIX=/usr/local \
      ..
    make 
    sudo make install
  popd > /dev/null
elif [ -e /usr/lib/libopencv_core.so ]; then
  echo "STATUS	: OpenCV found: "`ls /usr/lib/libopencv_core.so.*`
elif [ -e /usr/local/lib/libopencv_core.so ]; then
  echo "STATUS	: OpenCV found: "`ls /usr/local/lib/libopencv_core.so.*`
else
  echo "INSTALL	: OPENCV C++ libraries"
  sudo apt-get install -y libopencv-dev
fi

if [ ! -e /usr/include/fuse.h ] ; then
  echo "INSTALL	: FUSE C Libraries ..."
  sudo apt-get -y install libfuse-dev
  sudo ex -s -c "g/#user_allow_other/s/#//" -c wq /etc/fuse.conf
  echo "/usr/local/lib" > /etc/ld.so.conf.d/firefuse.conf
  sudo ldconfig
fi

if [ ! -e /usr/lib/lib_firesight.so ]; then
  echo "INSTALL	: FireSight ..."
  pushd ..
  git clone git://github.com/firepick1/FireSight
  popd > /dev/null
  pushd ../FireSight > /dev/null
  . ./build
  popd > /dev/null
fi

echo "STATUS	: creating makefiles"
cmake .

if [ "$(arch)" != "armv6l" ] ;then
  echo "----------------------------"
  echo "WARNING	: FireFUSE is only partially supported on this computer."
  echo "TRY	: Build FireFUSE with Rasbian on Raspberry Pi"
  echo "TRY	: On this machine, you can test FireFUSE with mock adapters:"
  echo "TRY	:   make testfirefuse"
  echo "TRY	:   target/testfirefuse"
  exit -1
fi
echo "STATUS	: Raspberry Pi Debian confirmed for installation"

if [ ! -e /usr/lib/libfirepicam.so ]; then
  echo "INSTALL	: libfirepicam ..."
  pushd .. > /dev/null
  git clone git://github.com/firepick1/FirePiCam
  popd > /dev/null
  pushd ../FirePiCam > /dev/null
  sudo -E ./build
  popd > /dev/null
fi

#if [ ! -e /opt/node ] ;then
#  echo "INSTALL	: nodejs ..."
#  sudo mkdir /opt/node
#  pushd /opt/node > /dev/null
#  sudo wget http://nodejs.org/dist/v0.10.22/node-v0.10.22-linux-arm-pi.tar.gz
#  sudo tar xvzf node-*-linux-arm-pi.tar.gz
#  sudo rm node-v0.10.22-linux-arm-pi.tar.gz
#  sudo mv node*/* .
#  sudo ex -s -c 'g/PATH/s/"$/:\/opt\/node\/bin"/' -c wq /etc/profile
#  source /etc/profile
#  popd > /dev/null
#fi

ps -ef | grep raspistill | grep -v grep | grep -v 'raspistill.sh' 
RC=$?
if [ $RC -eq 0 ]; then 
  STILL_PID=`ps -ef | grep raspistill | grep -v grep | grep -v 'raspistill.sh' | grep -o -E "[0-9]+" | head -1`
  echo "STATUS	: shutting down raspistill"
  echo "COMMAND	: sudo kill $STILL_PID"
  sudo kill $STILL_PID
  RC=$?
  if [ $RC -ne 0 ]; then echo "ERROR	: $RC"; exit $RC; fi
fi

# Agressively dismount /dev/firefuse
echo "STATUS	: unmounting /dev/firefuse..."
sudo fusermount -uq /dev/firefuse 
if [ $? -ne 0 ]; then 
  echo "WARNING	: non-zero result (VERIFYING): fusermount -uq /dev/firefuse"
  if [ -e /dev/firefuse ]; then
    sudo rmdir /dev/firefuse
    if [ $? -ne 0 ]; then
      echo "FAILED	: fusermount -uq /dev/firefuse"
      echo "TRY	: If you are running NodeJS FireREST web server, kill it"
      ps -ef | grep firerest.js | grep -v -e "grep firerest"
      exit -1
    fi
  fi
fi

if [ ! -e /dev/firefuse ]; then 
  echo "STATUS	: mkdir /dev/firefuse "
  sudo mkdir /dev/firefuse 
fi

COMMIT=`git log -1 | grep commit | grep -o '[^ ]*$'`
echo "GIT	: $COMMIT"
sed -i -e "s/{{FIREFUSE_GIT_COMMIT}}/$COMMIT/" version.h

echo "STATUS	: building and installing FireFUSE..."
make
if [ $? -ne 0 ]; then
  echo "FAILED	: make"
  echo "TRY	: correct make errors and retry"
  exit -1
fi

sudo make install
if [ $? -ne 0 ]; then
  echo "FAILED	: FireFUSE installation failed"
  exit -1
fi
echo "STATUS	: FireFUSE installed"

if [ -e /var/firefuse/cv ]; then
  sudo rm -rf /var/firefuse/cv
  sudo rm -rf /var/firefuse/sync/cv
fi
echo initializing /var/firefuse
if [ -e /var/firefuse/config.json ]; then
  sudo mv -f /var/firefuse/config.json /var/firefuse/config.json.bak
  echo "INFO	: Saved old /var/firefuse/config.json as /var/firefuse/config.json.bak"
fi
sudo cp var/firefuse/config.json /var/firefuse/

echo "STATUS	: Mounting the multi-threaded firefuse file system on /dev/firefuse"
echo "COMMAND	: target/firefuse -o allow_other /dev/firefuse"
sudo target/firefuse -o allow_other /dev/firefuse
if [ $? -ne 0 ]; then
  echo "!!!!!!!!!!!!!!!!! ERROR !!!!!!!!!!!!!!!!!!!!"
  echo "ERROR	: COULD NOT MOUNT /dev/firefuse"
  echo "ERROR	: FireFUSE has not been installed"
  echo "ERROR	: Dumping /var/log/firefuse.log:"
  echo
  cat /var/log/firefuse.log
  echo "!!!!!!!!!!!!!!!!! ERROR !!!!!!!!!!!!!!!!!!!!"
  exit -1
fi

echo "COMMAND	: sudo cp raspistill.sh /usr/local/bin/raspistill.sh"
sudo cp raspistill.sh /usr/local/bin/raspistill.sh
RC=$?
if [ $RC -ne 0 ]; then echo "ERROR	: $RC"; exit $RC; fi

if [ -e /dev/firefuse/status ]; then
  if [ ! -e /etc/rc5.d/S01mountfirefuse.sh ]; then
    sudo ./postinst
  fi
  echo "STATUS	: FireFUSE installed at startup in /dev/firefuse"
else
  echo "!!!!!!!!!!!!!!!!! ERROR !!!!!!!!!!!!!!!!!!!!"
  echo "ERROR	: FireFUSE mount failed: /dev/firefuse/status is missing"
  echo "ERROR	: Dumping /var/log/firefuse.log"
  echo "ERROR	: FireFUSE has not been installed"
  cat /var/log/firefuse.log
  echo "!!!!!!!!!!!!!!!!! ERROR !!!!!!!!!!!!!!!!!!!!"
  exit -1
fi

echo "---------------------------------------"
echo "DATE	: "`date`
echo "VERSION	: "`grep FireFUSE version.h`
echo "SUCCESS	: FireFUSE installation is complete!"

#! /bin/bash

if [ "$(arch)" != "armv6l" ] || [ "$(lsb_release -is)" != "Debian" ] ;then
  echo "========================== WARNING ==============================="
  echo "FireFuse is currently only supported on Raspberry Pi with Raspbian"
  echo "=================================================================="
else 
  echo "Raspberry Pi Debian confirmed for installation"
fi

cv="install"
 
function help() {
  echo "Build FireFuse for Raspbian"
  echo 
  echo "EXAMPLES:"
  echo "  sudo ./build"
  echo
  echo "OPTIONS:"
  echo "  -h"
  echo "  --help"
  echo "     Print this help text"
  echo "  -c install"
  echo "     Install pre-built OpenCV package if available (fast, simple). This is default."
  echo "  -c make"
  echo "     Rebuild OpenCV from latest source code from latest code."
  echo "     This will take about 10 hours and require a persistent ssh connection."
  echo "     If your build is interrupted:"
  echo "       cd opencv/build"
  echo "       sudo make install"
}
 
while getopts "hc:" flag; do
  case "$flag" in
    c) cv="$OPTARG";;
    h) help ; exit 0;;
    help) help ; exit 0;;
  esac
done
 
if [ "$SUDO_USER" == "" ]; then
  echo "This script must be run with sudo command from a non-root user"
  exit -1
fi

if [ "$(type -p cmake)" == "" ]; then
  echo "++++++++++++++++++ INSTALLING CMAKE ++++++++++++"
  if [ `uname -o` == "Solaris" ]; then
    pkgin -y install gmake
    pkgin -y install cmake
  else
    apt-get -y install cmake
  fi
else
  echo CMAKE OK
fi

if [ "$(type -p lsb-release)" == "" ]; then
  echo "++++++++++++++++++ INSTALLING lsb-release ++++++++++++"
  apt-get install -y lsb-release
fi

if [ ! -e /usr/local/include/jansson.h ] ; then
  echo "++++++++++++++++++ INSTALLING JANNSON C LIBRARY ++++++++++++"
  apt-get -y install dh-autoreconf
  git clone git://github.com/akheron/jansson jannson
  pushd jannson
  autoreconf -i
  ./configure
  cmake .
  make install
  popd
fi

if [ "$cv" == "make" ] ;then
  echo "++++++++++++++++++ BUILDING OPENCV C++ LIBRARIES ++++++++++++"
  echo "apt-get: Installing openexr for libIlmImf.so.6"
  apt-get -y install openexr
  apt-get -y install libavcodec-dev
  apt-get -y install libavformat-dev
  apt-get -y install libswscale-dev
  apt-get -y install libdc1394-22
  apt-get -y install libz-dev

  if [ ! -e opencv ] ; then
    sudo -u $SUDO_USER git clone https://github.com/firepick1/opencv -b 2.4
  fi
  sudo -u $SUDO_USER mkdir opencv/build
  pushd opencv/build
    sudo -u $SUDO_USER cmake \
      -D WITH_OPENEXR=OFF \
      -D CMAKE_BUILD_TYPE=DEBUG \
      -D CMAKE_INSTALL_PREFIX=/usr/local \
      ..
    sudo -u $SUDO_USER make 
    make install
  popd
elif [ -e /usr/lib/libopencv_core.so ]; then
  echo "OpenCV found in /usr/lib:"
  ls /usr/lib/libopencv_core.so.*
elif [ -e /usr/local/lib/libopencv_core.so ]; then
  echo "OpenCV found in /usr/local/lib:"
  ls /usr/local/lib/libopencv_core.so.*
else
  echo "++++++++++++++++++ INSTALLING OPENCV C++ LIBRARIES ++++++++++++"
  apt-get install -y libopencv-dev
fi

if [ ! -e /usr/include/fuse.h ] ; then
  echo "++++++++++++++++++ INSTALLING FUSE C LIBRARIES ++++++++++++"
  apt-get -y install libfuse-dev
  ex -s -c "g/#user_allow_other/s/#//" -c wq /etc/fuse.conf
  cp firefuse.conf /etc/ld.so.conf.d/
  ldconfig
fi
if [ ! -e /usr/lib/libfirepicam.so ]; then
  echo "++++++++++++++++++ INSTALLING firepicam C++ LIBRARY ++++++++++++"
  pushd ..
  sudo -u $SUDO_USER git clone git://github.com/firepick1/FirePiCam
  popd
  pushd ../FirePiCam
  ./build
  popd
fi
if [ ! -e /usr/lib/lib_firesight.so ]; then
  echo "++++++++++++++++++ INSTALLING firesight C++ LIBRARY ++++++++++++"
  pushd ..
  sudo -u $SUDO_USER git clone git://github.com/firepick1/FireSight
  popd
  pushd ../FireSight
  ./build
  popd
fi
if [ ! -e /opt/node ] ;then
  echo installing Nodejs...
  mkdir /opt/node
  pushd /opt/node
  wget http://nodejs.org/dist/v0.10.22/node-v0.10.22-linux-arm-pi.tar.gz
  tar xvzf node-*-linux-arm-pi.tar.gz
  rm node-v0.10.22-linux-arm-pi.tar.gz
  mv node*/* .
  ex -s -c 'g/PATH/s/"$/:\/opt\/node\/bin"/' -c wq /etc/profile
  source /etc/profile
  popd
fi
if [ -e /dev/firefuse/firestep ] ;then 
  echo Uninstalling /dev/firefuse...
  fusermount -u /dev/firefuse 
fi

if [ ! -e /dev/firefuse ]; then 
  echo mkdir /dev/firefuse 
  mkdir /dev/firefuse 
fi
if [ -e CMakeFiles ] ; then 
  echo removing existing makefiles
  rm -rf CMakeCache.txt CMakeFiles CMakeFiles.txt target cmake_install.cmake CPackConfig.cmake CPackSourceConfig.cmake
  sudo -u $SUDO_USER mkdir target
fi

#if [ ! -e /var/firefuse/cv/1/cve ]; then
  echo creating CVE folders
  rm -rf /var/firefuse
  mkdir -p /var/firefuse
  cp -r cv /var/firefuse
#fi

echo creating makefiles
sudo -u $SUDO_USER cmake .

echo building and installing FireFuse...
sudo -u $SUDO_USER make
if [ $? -ne 0 ]; then
  echo FAILED: make
  exit -1
fi

if [ "$(arch)" != "armv6l" ] || [ "$(lsb_release -is)" != "Debian" ] ;then
  echo "FireFuse is currently only supported on Raspberry Pi with Raspbian"
  exit -1
fi
echo installing FireFuse...
make install
if [ $? -ne 0 ]; then
  echo FAILED: make install
  exit -1
fi

firefuse -o allow_other /dev/firefuse

if [ -e /dev/firefuse/status ]; then
  if [ ! -e /etc/rc5.d/S01mountfirefuse.sh ]; then
    ./postinst
  fi
  echo "FireFuse installed at startup in /dev/firefuse"
else
  echo "COULD NOT BUILD FIREFUSE"
fi
